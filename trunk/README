# scripts for running KLEE
- check-all.sh compare-all.sh
  check-all.sh checks no-opt, klee-opt and opt-flags defined in compare-all.sh

- check-original.sh compare-original.sh
  check-original.sh checks no-opt and klee-opt only, and will call compare-original.sh

- check-flag.sh compare-flag.sh
  check-flag.sh checks optimization flags defined in compare-flags.sh

- recheck-flag.sh replay-flag.sh
  you can specify which flag to use for which coreutil in order to replay some of the results in recheck-flag.sh, and it will call replay-flag.sh

- run-a-test.sh
  everything above will call run-a-test.sh, in which you can spceify the maximum time. It will automatically choose corresponding binary based on the existance of --opt-flag
  the two binaries is named as klee-original and klee-flag. You can compile them yourself.

- note
  1. you need to specify which coreutil to use in all check-*.sh and recheck-flag.sh
  2. all test result will be located in test_result_new folder

# scripts for parsing the result
- analysis.sh get-result.py
  analysis.sh will assume results are already in ./test_result_new folder, and named as result_coreutilname.txt
  you need to specify which coreutil to use in analysis.sh
  analysis.sh will call get-result.py, which does the real parsing, and generate output in ./csv folder, with name coreutilname.csv for each coreutil

# c++ code
- klee-cpp.cpp makefile
  klee-cpp.cpp will run check-all.sh first, then analysis.sh, and then store the result in a hash map called dataMap
  you need to specify which coreutil to run in check-all.sh and analysis.sh
  now it supports one coreutil with multiple flags. e.g. ./klee-cpp csplit will run all flags for csplit, assuming that csplit is defined in both two scrpits, and the flags are defined in compare-all.sh

Please refer to the code and let me know if you have any questions:)

